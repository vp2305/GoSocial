basePath: /v1
definitions:
  main.CreatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    type: object
  models.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  models.PostWithMetadata:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      comments_count:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for a social network for gophers.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: "GoSocialMedia\tAPI"
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Create a token for stateless authorization
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Invalid payload
          schema: {}
        "401":
          description: User not found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request
          schema: {}
        "409":
          description: Username or email already exist
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register a user
      tags:
      - authentication
  /health:
    get:
      consumes:
      - application/json
      description: Get configuration information of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get health
      tags:
      - ops
  /posts:
    post:
      consumes:
      - application/json
      description: Create a post by providing necessary information.
      parameters:
      - description: Request body with post details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/main.CreatePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created post information
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid request
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post by id.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Post deleted successfully
          schema:
            type: string
        "404":
          description: Post not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Get post details and respective comments by id.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Post not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get a post by id
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update post details by id.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Request body with post details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/main.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Updated post information
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid request
          schema: {}
        "404":
          description: Post not found
          schema: {}
        "409":
          description: Conflict occurred while updating
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update a post
      tags:
      - posts
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Invalid request
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/{userID}/follow:
    put:
      consumes:
      - application/json
      description: Follow a user by providing the target user's ID in the path and
        the current user's ID in the request body.
      parameters:
      - description: Target User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User followed successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema: {}
        "404":
          description: Target user not found
          schema: {}
        "409":
          description: Already following the user
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follow a user
      tags:
      - users
  /users/{userID}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollow a user by providing the target user's ID in the path and
        the current user's ID in the request body.
      parameters:
      - description: Target User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User unfollowed successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema: {}
        "404":
          description: Target user not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user
      tags:
      - users
  /users/activate/{token}:
    put:
      description: Activates/Register a user by invitation token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: No users found associated to the token provided
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates/Register a user
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Get user feed respective to the pagination, filters and sort
      parameters:
      - description: Limit post per request
        in: path
        name: limit
        type: integer
      - description: Offset by the previous post
        in: path
        name: offset
        type: integer
      - description: Sort post by asc or desc
        in: path
        name: sort
        type: integer
      - description: Search by title or content
        in: path
        name: search
        type: string
      - description: Filter by relative tags
        in: path
        name: tags
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostWithMetadata'
            type: array
        "404":
          description: Post not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get user feed
      tags:
      - feed
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
